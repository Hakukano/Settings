if has('python3')
    silent! python3 1
endif

filetype plugin indent on
syntax on

let $LANG = 'en_US'

set autoindent
set background=dark
set backspace=indent,eol,start
set encoding=utf-8
set expandtab
set gdefault
set guioptions-=L
set guioptions-=T
set guioptions-=m
set guioptions-=r
set hlsearch
set incsearch
set nocompatible
set number
set relativenumber
set shiftwidth=0
set smartindent
set smarttab
set tabstop=4
set wildmenu

inoremap <Down> <nop>
inoremap <Left> <nop>
inoremap <Right> <nop>
inoremap <Up> <nop>
nnoremap <C-C> <C-W><C-C>
nnoremap <C-H> <C-W><C-H>
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-Y>f :YcmCompleter FixIt<CR>
nnoremap <C-Y>g :YcmCompleter GoTo<CR>
nnoremap <C-Y>r :YcmRestartServer<CR>
nnoremap <C-Y>t :YcmCompleter GetType<CR>
nnoremap <Down> <nop>
nnoremap <Left> <nop>
nnoremap <Right> <nop>
nnoremap <Up> <nop>
nnoremap <silent> - :bdelete<CR>
nnoremap <silent> <BS> :nohlsearch<CR>
nnoremap <silent> <CR> :w<CR>
nnoremap <silent> H gT
nnoremap <silent> L gt
nnoremap <silent> Q :q<CR>
nnoremap <silent> U :UndotreeToggle<CR>
nnoremap <silent> _ :bdelete!<CR>

call plug#begin()
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'derekwyatt/vim-scala'
Plug 'digitaltoad/vim-pug'
Plug 'flazz/vim-colorschemes'
Plug 'jiangmiao/auto-pairs'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'lervag/vimtex'
Plug 'mattn/emmet-vim'
Plug 'mbbill/undotree'
Plug 'rdnetto/YCM-Generator', { 'branch': 'stable'}
Plug 'rhysd/vim-clang-format'
Plug 'scrooloose/nerdtree'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
if has('python') || has('python2') || has('python3')
    Plug 'Valloric/YouCompleteMe'
endif
if has('win32')
    Plug 'xolox/vim-misc'
    Plug 'xolox/vim-shell'
endif
if has('nvim')
    Plug 'neovimhaskell/haskell-vim'
    Plug 'alx741/vim-hindent'
endif
call plug#end()

" Settings for plugs
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ 'Ignored'   : '☒',
    \ "Unknown"   : "?"}
let g:NERDTreeShowIgnoredStatus = 1

colorscheme Monokai
set guifont=Lucida_Console:h12:cANSI:qDRAFT

" Command for git grep
" - fzf#vim#grep(command, with_column, [options], [fullscreen])
command! -bang -nargs=* GGrep
            \ call fzf#vim#grep(
            \   'git grep --line-number '.shellescape(<q-args>), 0,
            \   { 'dir': systemlist('git rev-parse --show-toplevel')[0] }, <bang>0)
" Override Colors command. You can safely do this in your .vimrc as fzf.vim
" will not override existing commands.
command! -bang Colors
            \ call fzf#vim#colors({'left': '15%', 'options': '--reverse --margin 30%,0'}, <bang>0)
" Augmenting Ag command using fzf#vim#with_preview function
"   * fzf#vim#with_preview([[options], [preview window], [toggle keys...]])
"     * For syntax-highlighting, Ruby and any of the following tools are required:
"       - Bat: https://github.com/sharkdp/bat
"       - Highlight: http://www.andre-simon.de/doku/highlight/en/highlight.php
"       - CodeRay: http://coderay.rubychan.de/
"       - Rouge: https://github.com/jneen/rouge
"
"   :Ag  - Start fzf with hidden preview window that can be enabled with "?" key
"   :Ag! - Start fzf in fullscreen and display the preview window above
command! -bang -nargs=* Ag
            \ call fzf#vim#ag(<q-args>,
            \                 <bang>0 ? fzf#vim#with_preview('up:60%')
            \                         : fzf#vim#with_preview('right:50%:hidden', '?'),
            \                 <bang>0)
" Similarly, we can apply it to fzf#vim#grep. To use ripgrep instead of ag:
command! -bang -nargs=* Rg
            \ call fzf#vim#grep(
            \   'rg --column --line-number --no-heading --color=always --smart-case '.shellescape(<q-args>), 1,
            \   <bang>0 ? fzf#vim#with_preview('up:60%')
            \           : fzf#vim#with_preview('right:50%:hidden', '?'),
            \   <bang>0)
" Likewise, Files command with preview window
command! -bang -nargs=? -complete=dir Files
            \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)


let g:user_emmet_mode='a'
let g:user_emmet_install_global = 0
autocmd FileType html,css EmmetInstall

let g:clang_format#style_options = {
            \ "ColumnLimit" : 0}

let NERDTreeShowHidden=1

if has('win32')
    let g:ycm_global_ycm_extra_conf = '~/vimfiles/ycm_extra_conf.py'
else
    let g:ycm_global_ycm_extra_conf = '~/.vim/ycm_extra_conf.py'
endif
let  g:ycm_autoclose_preview_window_after_insertion  =  1
let  g:ycm_confirm_extra_conf                        =  0
let  g:ycm_max_diagnostics_to_display                =  0
let  g:ycm_min_num_of_chars_for_completion           =  1
let  g:ycm_seed_identifiers_with_syntax              =  1

if has('nvim')
    let  g:haskell_enable_quantification    =  1  "  to  enable  highlighting  of  `forall`
    let  g:haskell_enable_recursivedo       =  1  "  to  enable  highlighting  of  `mdo`      and       `rec`
    let  g:haskell_enable_arrowsyntax       =  1  "  to  enable  highlighting  of  `proc`
    let  g:haskell_enable_pattern_synonyms  =  1  "  to  enable  highlighting  of  `pattern`
    let  g:haskell_enable_typeroles         =  1  "  to  enable  highlighting  of  type       roles
    let  g:haskell_enable_static_pointers   =  1  "  to  enable  highlighting  of  `static`
    let  g:haskell_backpack                 =  1  "  to  enable  highlighting  of  backpack   keywords
endif
" END

augroup vimrc
    autocmd!

    autocmd BufEnter * silent! lcd %:p:h

    autocmd BufReadPost *
                \ if line("'\"") >= 1 && line("'\"") <= line("$") |
                \   exe "normal! g`\"" |
                \ endif

    autocmd FileType cpp setlocal tabstop=2
    autocmd FileType cpp nnoremap <C-F> :ClangFormat<CR>
    autocmd FileType cpp xnoremap <C-F> :ClangFormat<CR>

    autocmd vimenter * NERDTree
    autocmd StdinReadPre * let s:std_in=1
    autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

    if has('win32')
        autocmd GUIEnter * simalt ~x
    endif

augroup END
